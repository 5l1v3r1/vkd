#!/usr/bin/env python2

"""Save everything from your VK wall"""

__author__ = "Rast"

import logging
import argparse
import json
import urllib2
from urllib import urlencode
import re
from time import sleep
from collections import defaultdict
from PostParser import PostParser


def arg_parse():
    argparser = argparse.ArgumentParser()
    argparser.add_argument("-d", "--dir",
                        type=str,
                        help="Directory to store dumped data",
                        dest="directory",
                        required=False,
                        default=".")
    argparser.add_argument("-i", "--id",
                        type=int,
                        help="User ID to dump. To dump a group, specify its ID with '-' prefix",
                        metavar="USER_ID|-GROUP_ID",
                        dest="id",
                        required=False,
                        default=0)
    argparser.add_argument("-t", "--token",
                        type=str,
                        help="Access token, generated by VK for session",
                        dest="token",
                        required=False)
    argparser.add_argument("-a", "--app_id",
                        type=int,
                        help="Your application ID to access VK API",
                        dest="app_id",
                        required=True)
    argparser.add_argument("-s", "--start",
                        type=int,
                        help="Post number to start from (first is 0)",
                        dest="start",
                        required=False,
                        default=0)
    argparser.add_argument("-e", "--end",
                        type=int,
                        help="Post number to end at (0 = all posts)",
                        dest="end",
                        required=False,
                        default=0)
    argparser.add_argument("-v", "--verbose", action="store_true",
                        help="Print more info to STDOUT while processing")

    args = argparser.parse_args()
    return args


def auth(args, access_rights):
    """Interact with user to get access_token"""

    url = "https://oauth.vk.com/oauth/authorize?" + \
          "redirect_uri=https://oauth.vk.com/blank.html&response_type=token&" + \
          "client_id=%s&scope=%s&display=wap" % (args.app_id, ",".join(access_rights))

    print("Please open this url:\n\n\t{}\n".format(url))
    raw_url = raw_input("Grant access to your acc and copy resulting URL here: ")
    res = re.search('access_token=([0-9A-Fa-f]+)', raw_url, re.I)
    if res is not None:
        return res.groups()[0]
    else:
        return None


def call_api(method, params, token):
    if isinstance(params, list):
        params_list = [kv for kv in params]
    elif isinstance(params, dict):
        params_list = params.items()
    else:
        params_list = [params]
    params_list.append(("access_token", token))
    url = "https://api.vk.com/method/%s?%s" % (method, urlencode(params_list))
    json_stuff = urllib2.urlopen(url).read()
    result = json.loads(json_stuff)
    if u'error' in result.keys():
        raise RuntimeError("API call resulted in error ({}): {}".format(result[u'error'][u'error_code'],
                                                                        result[u'error'][u'error_msg']))

    if not u'response' in result.keys():
        raise RuntimeError("API call result has no response")
    else:
        return (result[u'response'], json_stuff)


def process_post(loud, number, post_data, post_parser, json_stuff):
    """Post-processing :)"""
    if loud:  # print info table
        # print header
        if number % 10 == 0:
            print "{:^4} {:^6} {:^12} {:^12} {:^12} {:^12} {:^12} {:^12} {:^12}".format(
                "type", 'id', 'to_id',
                'from_id', 'date', 'signer_id',
                'copy_owner_id', 'copy_post_id', 'len(copy_text)'
            )

        data = defaultdict(lambda: "", post_data[1])
        print "{:^4} {:^6} {:^12} {:^12} {:^12} {:^12} {:^12} {:^12} {:^12}".format(
            data['post_type'], data['id'], data['to_id'],
            data['from_id'], data['date'], data['signer_id'],
            data['copy_owner_id'], data['copy_post_id'], len(data['copy_text'])
        )
        result = post_parser(data, json_stuff)


def main():
    """Main function"""
    access_rights = ["wall", ]

    args = arg_parse()
    args.token = auth(args, access_rights) if args.token is None else args.token
    if args.token is None:
        raise RuntimeError("Access token not found")


    userid = str(args.id) if args.id != 0 else 'you'
    #determine posts count
    (response, json_stuff) = call_api("wall.get", [("owner_id", args.id), ("count", 1), ("offset", 0)], args.token)
    count = response[0]
    logging.info("Total posts: {}".format(count))
    if args.end == 0:
        args.end = count
    if not 0 <= args.start < count + 1:
        raise RuntimeError("Start argument not in valid range")
    if not args.start <= args.end <= count:
        raise RuntimeError("End argument not in valid range")
    logging.info("Parsing posts from {} to {}".format(args.start, args.end))

    print len(xrange(args.start, args.end))
    total = args.end - args.start
    counter = 0.0  # float for %
    post_parser = PostParser(args.directory, userid)
    for x in xrange(args.start, args.end):
        if x % 5 == 0:
            sleep(1)
            print("Done: {:.2%} ({})".format(counter / total, counter))
        (post, json_stuff) = call_api("wall.get", [("owner_id", args.id), ("count", 1), ("offset", x)], args.token)
        process_post(args.verbose, x, post, post_parser, json_stuff)
        counter += 1
    print("Done: {:.2%} ({})".format(float(total) / total, total))


if __name__ == '__main__':
    logging.basicConfig(format=u"""%(filename)s[LINE:%(lineno)d]#%(levelname)-8s [%(asctime)s] %(message)s""",
                            level=logging.DEBUG,
                            filename=u'report.log')
    ok = False
    try:
        logging.info("Start")
        main()
        logging.info("End")
        ok = True
    except KeyboardInterrupt:
        logging.critical("Interrupted by keystroke")
        print "\nWhy, cruel world?.."
    finally:
        if not ok:
            logging.critical("Fail")
